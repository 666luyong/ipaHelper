#!/bin/bash

#if $ipa is "" then there's a problem, exit. if $1 is passed in, it is another possible required item (instead of the ipa file)
function assert_ipa
{
if [ "$ipa" = "" ];then
	message="missing app file"
	if [ "$1" != "" ];then
		message="$message or $1"
	fi
        problem_encountered "$message"
fi
}

#returns ipa file name in the working directory
function ipa_in_wd
{
cd "$wd"
find ./ -type f -maxdepth 1 -iname "*.ipa" | while read f; do
	f="${f:3}"
	echo "$f"
	return
done
}

#called to end the script with success
function script_done
{
clean_up
exit 0
}

#called to end script in error
function problem_encountered
{
if [ "$1" != "" ];then
	echo "**** $1 ****" >&2
fi
clean_up
echo 'type "help" for usage page' >&2
exit 1
}

#display usage information

##Help Functions##
function help_help
{
echo '*****HELP*****

ipaHelper help [ -v ] [ commands... ]

Displays usage information for the different commands.  

If -v option is present it shows the usage information for all of the commands.
'

echo "Commands:   Get   Certs   Profile   Info   Summary   Verify   Resign   Account   Upload   Help"
echo
}

function help_get
{
echo '*****GET*****

ipaHelper get [ mobileprovision files...  ]

Moves mobileprovision files into the working directory.

If no profiles are specified, all mobileprovision files in the Downloads folder are moved.
'
}

function help_certs
{
echo '*****CERTS*****

ipaHelper certs [ substring ]

Displays information on all certificates in the keychain.

If a substring is provided, only certificates containing this substring are displayed.
'
}

function help_profile
{
echo '*****PROFILE*****

ipaHelper profile [ file ] [ options ]

Checks the profile of an ipa, app, or xcarchive file, or shows the information about a mobileprovision file

If no file is provided, the first (alphabetically) ipa file in the working directory is used.
            
If no options are present, a summary of the provisioning profile is displayed.
                
Options:
                
[-v | --verbose] display the entire profile in xml format
                
[-i | --id] display the application identifier
                
[-c | --certificate] display the certificate name
                
[-t | --team] display the team name on the certificate
                
[-x | --expiration] display the expiration date for the profile
                
[-e | --entitlements] display the entitlements on the profile
                
[-k | --key] takes a key as an argument, returns the value for that key on the profile   

[-l | --list] lists all keys in the profile
'
}

function help_info
{
echo '*****INFO*****

ipaHelper info [ file ] [ -E ] [ options ]

Checks the Info.plist of an ipa, app, or xcarchive file, or shows the information about an Info.plist file

If no file is provided, the first (alphabetically) ipa file in the working directory is used.
            
If no options are present, a summary of the Info.plist is displayed.
                
Options:

[-E | --edit] edit the mobileprovision file in vim
                
[-v | --verbose] display the entire Info.plist in xml format
                
[-i | --identifier] display the CFBundleIdentifier
                
[-k | --key] takes a key as an argument, returns the value for that key on the Info.plist

[-l | --list] lists all keys in the Info.plist
'
}

function help_summary
{
echo '*****SUMMARY*****

ipaHelper summary [ file ]

Displays profile and info.plist information about an ipa, app, or xcarchive file.

If no file is provided the first (alphabetically) ipa file in the working directory is used.
'
}

function help_verify
{
echo '*****VERIFY*****

ipaHelper verify [ file ]

Checks to make sure the necessary code signing components are in place for an ipa, app, or xcarchive file.

If no file is provided the first (alphabetically) ipa file in the working directory is used.
'
}

function help_resign
{
echo '*****RESIGN*****

ipaHelper resign [ file ] [ options ]

Removes the code signature from an ipa, app, or xcarchive file, and replaces it either with the first profile (alphabetically) in the directory with the file.

Resigns the file using the certificate on the profile, zips the resigned ipa file with the name [filename]-resigned.ipa.
    
If no file is provided, the first (alphabetically) ipa file in the working directory is used.
        
Options:
        
[-p | --profile] takes a specific profile as an argument, uses this profile for resigning the ipa
        
[-d | --double-check] displays information about the file, its Info.plist, and the provisioning profile and offers a choice to continue or quit

[-o | --output ] takes an output file as an argument, zips the resigned ipa file using this name instead of [ipa filename]-resigned.ipa
'
}

function help_account
{
echo '*****ACCOUNT*****

ipaHelper account [ options ]

Displays information about which certificates are linked with which iTunesConnect accounts.

Options:

[-g | --get] takes a certificate as an argument, returns the iTunesConnect account linked to that certificate

[-s | --set] takes a certificate and an iTunesConnect account as arguments.  Links the certificate to the iTunesAccount

[-r | --remove] takes a certificate as an argument.  Removes the link between this certificate and its iTunesConnect account.
'
}

function help_upload
{
echo '*****UPLOAD*****

ipaHelper upload [ ipa file ]

Uploads the ipa file to iTunesConnect.  Asks for an iTunesConnect username if none is linked to the ipas certificate.

Asks for a password for this account.

If no ipa file is provided, the first (alphabetically) ipa file in the working directory is used.
'
}

function clean_up
{
if [ -d "$bd/.ipa_payload" ]; then
    rm -rf "$bd/.ipa_payload"
fi
if [ -f "$bd/.Info.plist" ]; then
	rm "$bd/.Info.plist"
fi
if [ -f "$bd/.Entitlements.plist" ]; then
	rm "$bd/.Entitlements.plist" 
fi
}

##Parsing Functions##

#takes a string ($1) and returns a value for the key (passed in a $2)
function value_for_key
{
tmp="${1##*<key>"$2"</key>}"
tmp="${tmp%%</*}"
tmp="${tmp##*>}"
echo "$tmp"
}

#takes an xml string and returns all keys in that file
function allkeys
{
while read -r line; do
    if [ "$line" != "${line#*<key>}" ]; then
        tmp="${line#*<key>}"
        tmp="${tmp%</key>*}"
        echo "$tmp"
    fi
done <<< "$1"
}

#returns useful information from an Info.plist
function parse_info
{
echo "       CFBundleName: $(value_for_key "$1" "CFBundleName")"
echo "CFBundleDisplayName: $(value_for_key "$1" "CFBundleDisplayName")"
echo " CFBundleIdentifier: $(value_for_key "$1" "CFBundleIdentifier")"
echo "    CFBundleVersion: $(value_for_key "$1" "CFBundleVersion")"
echo " ShortBundleVersion: $(value_for_key "$1" "CFBundleShortVersionString")"
}

#returns useful information from a profile
function parse_profile
{
echo "        App ID Name: $(value_for_key "$1" "AppIDName")"
echo "     App Identifier: $(value_for_key "$1" "application-identifier")"
echo "   Certificate Name: $(value_for_key "$1" "Name")"
echo "          Team Name: $(value_for_key "$1" "TeamName")"
echo "    Expiration Date: $(date -j -f "%Y-%m-%dT%H:%M:%SZ" $(value_for_key "$1" "ExpirationDate") +"%b %e, %Y")"
echo "               UUID: $(value_for_key "$1" "UUID")"
}

#returns profile name from a list of resign args
function profile_from_args
{
tmp=
while [ "$1" != "" ];do
	case "$1" in
		-p | --profile )	if [ "${2:0:1}" = "-" -o "$2" = "" ];then
		        				break
				        	fi
				        	cd "$wd"
				        	tmp="$2"
				        	if [[ "$2" = *"/"* ]]; then
					    	cd $(dirname "${2}")
					    	tmp=$(basename "${2}")
    				    	fi
    					    dir="$(pwd)"
    				    	echo "$dir/$tmp"
    			    		break;;
		* )			        shift;;
	esac
done
if [ "$tmp" != "" ]; then
	return
fi
cd "$bd"
find ./ -type f -maxdepth 1 -iname "*.mobileprovision" | while read f; do
        f="${f:3}"
        echo "$bd/$f"
        break
done
}

#returns output filename from a list of resign args
function output_from_args
{
tmp=
while [ "$1" != "" ];do
    case "$1" in
        -o | --output )     if [ "${2:0:1}" = "-" -o "$2" = "" ];then
                                break
                            fi
                            cd "$wd"
                            tmp="$2"
                            if [[ "$2" = *"/"* ]]; then
                                cd $(dirname "${2}")
                                tmp=$(basename "${2}")
                            fi
                            dir="$(pwd)"
                            echo "$dir/$tmp"
                            break;;
        * )                 shift;;
    esac
done
if [ "$tmp" != "" ]; then
    return
fi
echo "$bd/${ipa%.*}-resigned.ipa"
}


#returns "dc" if -d --double-check option in args list
function dc_from_args
{
while [ "$1" != "" ];do
	case "$1" in
		-d | --double-check ) 	echo "dc"
								break;;
		* )						shift
	esac
done
}

function dontclean_from_args
{
while [ "$1" != "" ];do
	case "$1" in
		-dc | --dont-clean ) 	echo "dc"
								break;;
		* )						shift
	esac
done
}

function JSON_from_args
{
while [ "$1" != "" ];do
	case "$1" in
		--json ) 	echo "json"
					break;;
		* )			shift
	esac
done
}

function ql_from_args
{
while [ "$1" != "" ];do
	case "$1" in
		--ql ) 	    echo "ql"
					break;;
		* )			shift
	esac
done
}

function convert_to_JSON
{
echo -n "{"
while read line; do
    if [ "${line:0:1}" != "*" ]; then
        while [ "${line:0:1}" = " " ]; do
            line="${line:1}"
        done
        echo -n '"'
        echo -n "${line//: /":"}"
        echo -n '",'
    fi
done <<< "$1"
if [ "$2" = "ql" ]; then
    echo -n '"'
    echo -n 'AppDirectory":"'
    echo -n "$bd/$ad"
    echo -n '",'
fi
}


#Make Entitlements.plist - $1 is the full profile text
function make_entitlements_from_profile
{
echo '<?xml version="1.0" encoding="UTF-8"?>'
echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
echo '<plist version="1.0">'
echo '<dict>'
tmp="${1##*Entitlements</key>}"
tmp="${tmp#*<dict>}"
tmp="${tmp%%</dict>*}"
echo "$tmp"
echo '</dict>'
echo '</plist>'
}

function make_plist
{
    echo '<?xml version="1.0" encoding="UTF-8"?>'
    echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
    echo '<plist version="1.0">'
    echo '<dict>'
    echo '</dict>'
    echo '</plist>'
}

### CMD FUNCTIONS ###
function cmd_help
{
if [ "$1" = "" ]; then
    help_help
elif [ "$1" = "-v" ]; then
    help_get
    help_certs
    help_profile
    help_info
    help_summary
    help_verify
    help_resign
    help_account
    help_upload
else
    while [ "$1" != "" ]; do
        case "$1" in
            [hH]* ) help_help;;
            [gG]* ) help_get;;
            [cC]* ) help_certs;;
            [pP]* ) help_profile;;
            [iI]* ) help_info;;
            [sS]* ) help_summary;;
            [vV]* ) help_verify;;
            [rR]* ) help_resign;;
            [aA]* ) help_account;;
            [uU]* ) help_upload;;
            * ) problem_encountered "Not a valid command";;
        esac
        shift
    done
fi
}

function cmd_certs
{
    tmp=
    if [ "$1" != "" ]; then
        tmp=" -c $1"
    fi
    certs="$(security find-certificate$tmp -a)"
    echo '********************** Certificates **********************' 
    while read line; do
        if [ "$line" != "${line#*'labl"<blob>="'}" ]; then
            tmp="${line#*'labl"<blob>="'}"
            echo "${tmp%?}"
        fi
    done <<< "$certs"
}

function cmd_get
{
    echo "moving..."
    if [ "$1" = "" ];then
        find ~/Downloads/ -type f -iname "*.mobileprovision" | while read f; do
            echo "$f"
            profilename="$(basename "${f}")"
            mv "$f" "./$profilename"
        done
        script_done
    fi
    while [ "$1" != "" ];do
        if [ "${1%.mobileprovision}" != "$1" ];then
            echo "$1"
            profilename="$(basename "${1}")"
            mv "$1" "$bd/$profilename"
        else
            problem_encountered "Not a profile"
        fi
        shift
    done
}

function cmd_account
{
    if [ ! -f ~/Publishing/Resources/accounts.plist ]; then
        make_plist > ~/Publishing/Resources/accounts.plist
    fi
    accounts="$(cat ~/Publishing/Resources/accounts.plist)" 
    if [ "$1" = "" ]; then
        keys="$(allkeys "$accounts")"
        while read -r key; do
            value="$(value_for_key "$accounts" "$key")"
            if [ "$key" != "" ]; then
                echo "$key: $value"
            fi
        done <<< "$keys"
    else
        case "$1" in
        -g | --get )    if [ "$2" = "" ]; then
                            problem_encountered "missing key"
                        fi
                        value="$(value_for_key "$accounts" $2)"
                        echo "$2: $value";;
        -s | --set )    if [ "$2" = "" ]; then
                            problem_encountered "missing key"
                        fi
                        if [ "$3" = "" ]; then
                            problem_encountered "missing value"
                        fi
                        #check to see if the key is already there
                        if [ "$accounts" != "${accounts#*<key>$2</key>}" ]; then
                            tmp="${accounts#*<key>$2</key>}"
                            tmp="${tmp#*>}"
                            front="${accounts%$tmp}"
                            back="<${tmp#*<}"
                            echo "$front$3$back" > ~/Publishing/Resources/accounts.plist
                        else
                            front="${accounts%%</dict*>}"
                            back="${accounts#$front}"
                            new="$front\t<key>$2</key>\n\t<string>$3</string>\n$back"
                            echo -e "$new" > ~/Publishing/Resources/accounts.plist
                        fi;;
        -r | --remove ) if [ "$accounts" != "${accounts#*<key>$2</key>}" ]; then
                            front="${accounts%%<key>$2</key>*}"
                            front="${front%>*}>"
                            tmp="${accounts#$front}"
                            back="${tmp#*</string>}"
                            echo "$front$back" > ~/Publishing/Resources/accounts.plist
                        else
                            problem_encountered "Key does not exist"
                        fi;;
        * )             problem_encountered "not a valid option";;
        esac
    fi
}

function cmd_profile
{
	if [ "$1" = "" ];then
		echo '*********************************************************'
		parse_profile "$profile"
		echo '*********************************************************'
		script_done
	fi
	while [ "$1" != "" ];do
		case "$1" in
			-v | --verbose )	    echo "$profile";;
            -i | --id )             echo "Application Identifier: $(value_for_key "$profile" "application-identifier")";;
            -c | --certificate )    echo "Certificate Name: $(value_for_key "$profile" "Name")";;
			-t | --team )		    echo "Team Name: $(value_for_key "$profile" "TeamName")";;
            -x | --expiration )     echo "Expiration Date: $(date -j -f "%Y-%m-%dT%H:%M:%SZ" $(value_for_key "$profile" "ExpirationDate") +"%b %e, %Y")";;
			-e | --entitlements )	tmp="${profile##*Entitlements}"
					            	tmp="${tmp#*<dict>}"
					            	tmp="${tmp%%</dict>*}"
					            	tmp="${tmp//?[[:space:]]</<}"
					            	tmp="${tmp:1}"
					            	echo '***************ENTITLEMENTS***************'
					            	echo "$tmp"
					            	echo '******************************************';;	
			-k | --key )	    	shift
					            	if [ "$1" = "" ];then
						             	problem_encountered "key option needs a parameter"
						            fi
						            echo "$1: $(value_for_key "$profile" "$1")";;
            -l | --list)            echo '****************** KEYS ******************'
                                    while read line; do 
                                        if [ "${line#*<key>}" != "$line" ]; then 
                                            tmp="${line%%</key>*}" 
                                            echo "${tmp##*<key>}"  
                                        fi 
                                    done <<< "$profile"
                                    echo '******************************************';;
            * )			            problem_encountered "Invalid Option";;
		esac
		shift
	done
}

function cmd_info
{
if [ "$1" = "-E" ]; then
        xml=Y
        #check to see if the info.plist is a binary
        plist="$(cat $infoplist)"
        if [ "${plist:0:5}" != "<?xml" ]; then
            xml=N
            plutil -convert xml1 "$infoplist"
        fi
        vi "$infoplist"
        #convert back to binary if it was binary
        if [ "$xml" = "N" ]; then
            plutil -convert binary1 "$infoplist"
        fi
        cd "$bd/.ipa_payload"
        zip -qr "$bd/$ipa Payload/"
else
    cp "$infoplist" "$bd/.Info.plist"
	infoplist="$bd/.Info.plist"
	plutil -convert xml1 "$infoplist"
	infoplist="$(cat "$infoplist")"
	if [ "$1" = "" ];then
                echo '*********************************************************'
                parse_info "$infoplist"
                echo '*********************************************************'
    else
        while [ "$1" != "" ];do
            case "$1" in
            -v | --verbose )    	echo "$infoplist";;
            -i | --identifier )   	echo "CFBundleIdentifier: $(value_for_key "$infoplist" "CFBundleIdentifier")";;
            -k | --key )            shift
                                    if [ "$1" = "" ];then
                                        problem_encountered "key option needs a parameter"
                                    fi
                                    echo "$1: $(value_for_key "$infoplist" "$1")";;
            -l | --list)            echo '****************** KEYS ******************'
                                    while read line; do
                                        if [ "${line#*<key>}" != "$line" ]; then
                                            tmp="${line%%</key>*}"
                                            echo "${tmp##*<key>}"  
                                        fi
                                    done <<< "$infoplist"
                                    echo '******************************************';;
            * )                     	problem_encountered "Invalid Option";;
            esac
            shift
        done
    fi
fi
}

function cmd_summary
{
    cp "$bd/$ad/Info.plist" "$bd/.Info.plist"
    plutil -convert xml1 "$bd/.Info.plist"
    info="$(cat "$bd/.Info.plist")"
    profile="$(security cms -D -i "$bd/$ad/embedded.mobileprovision")"
    filesize="$(du -sh $bd/$ipa | cut -f 1)"
    filesize="${filesize/M/ MB}"
    filesize="${filesize/K/ KB}"
    echo '**********************************************************'
    echo "               File: $ipa"
    echo "           Filesize: $filesize"
    parse_info "$info"
    parse_profile "$profile"
    echo '**********************************************************'
}

function cmd_verify
{
	cd "$(dirname "$bd/$ad")"
	base="$(basename "${ad}")"	
	codesign --verify -vvvv "$base"
}

function cmd_resign
{
    cd "$bd"
	profile="$(profile_from_args $@)"
	if [ "$profile" = "" ];then
		problem_encountered "No Provisioning profile"
	fi
	fullprofile="$(security cms -D -i "$profile")"
	cert="$(value_for_key "$fullprofile" TeamName)"
	appid="$(value_for_key "$fullprofile" application-identifier)"
	cp "$bd/$ad/Info.plist" "$bd/.Info.plist"
    plutil -convert xml1 "$bd/.Info.plist"
    infoplist="$(cat "$bd/.Info.plist")"
	bundleid="$(value_for_key "$infoplist" CFBundleIdentifier)"
	entitlementsstring="--entitlements .Entitlements.plist"
    tent="$(make_entitlements_from_profile "$fullprofile")"
    echo "$tent" > .Entitlements.plist
    #check to see if there was an output file
    newipa="$(output_from_args $@)"
    #see if this output file already exists
    if [ -f "$newipa" ]; then
        echo "$(basename "$newipa") already exists."
        input=
        while [ "$input" != "o" ]; do
            case "$input" in
                [cC]* ) echo ""
                        script_done;;
                [oO]* ) break;;
                * )     echo -n "Overwrite (o) or Cancel (c)? "
                        read -n 1 input;;
            esac
        done
        echo ""
    fi
    dc="$(dc_from_args $@)"
	if [ "$dc" = "dc" ];then
        echo '*************************IPA File*************************'
        echo "          input file: $ipa"
        echo "         output file: $(basename "$newipa")"
        echo '************************Info.plist************************'
        parse_info "$infoplist"
        echo '*************************Profile**************************'   
        parse_profile "$fullprofile"
        echo '**********************************************************'
        input=
		while [ "$input" != "y" ];do
			case "$input" in
				[n] )   echo ""
                        script_done;;
				[y] )   break;;
				* )	echo -n 'Continue with resign? (y or n):'
					read -n 1 input;;
			esac
		done
        echo ""
	fi
    #make sure AppID and CFBundleID match
	bundlestring=
    matching=N
    trimmedappid="${appid#*.}"
    #see if the app id is a match to the bundle id
    if [ "$trimmedappid" = "$bundleid" ]; then
        matching=Y
    fi
    #if the app id is a wildcard, see if the pattern matches the bundleid
    if [[ ("${appid: -1}" = "*") && ("$bundleid" = "${trimmedappid%?}"*) ]]; then
        matching=Y
    fi
	if [ "$matching" = "N" ]; then
		echo '**********************************************************'
		echo "The profile's App ID: $appid and the"
		echo "ipa file's Bundle ID: $bundleid do not match."
		echo '**********************************************************'
        input=
        while [ "$input" != "y" ]; do
            case "$input" in
                [nN]* ) echo ""
                        script_done;;
                [yY]* ) break;;
                * )     echo -n "Continue with resign? (y or n):" 
                        read -n 1 input;;
            esac
        done
        echo ""
        newbundleID=
        while [ "$newbundleID" = "" ]; do
            echo -n "sign with bundleID:"
            read newbundleID
        done
        xml=Y
		#check to see if the info.plist is a binary
		plist="$(cat "$bd/$ad/Info.plist")"
		if [ "${plist:0:5}" != "<?xml" ]; then
			xml=N
			plutil -convert xml1 "$bd/$ad/Info.plist"
		fi
	    tmp="${infoplist#*<key>CFBundleIdentifier</key>}"
		tmp="${tmp#*</}"
		tbck="</$tmp"
		tmp="${infoplist%$tbck}"
		tmp="${tmp%>*}"
		tfrt="$tmp>"	
		bundlestring="-i ${appid#*.}"
		echo "$tfrt$newbundleID$tbck" > "$bd/$ad/Info.plist"
		if [ "$xml" = "N" ]; then
			plutil -convert binary1 "$bd/$ad/Info.plist"
		fi
	fi
	cd "$bd"
	rm -rf "$ad/_CodeSignature/"
	cp "$profile" "$bd/$ad/embedded.mobileprovision"
    codesign -f -s "$cert" $entitlementsstring $bundlestring "$ad"
    cd .ipa_payload
    zip -qr "$newipa" Payload/
}

function cmd_upload
{
    if [ "$filetype" != "ipa" ]; then
        problem_encountered "Can only upload ipa files"
    fi
    profile="$bd/$ad/embedded.mobileprovision"
    if [ "$profile" = "" ];then
        problem_encountered "No Provisioning profile"
    fi
    fullprofile="$(security cms -D -i "$profile")"
    cert="$(value_for_key "$fullprofile" TeamName)"
    username=
    if [ -f ~/Publishing/Resources/accounts.plist ]; then
        accounts="$(cat ~/Publishing/Resources/accounts.plist)"
        keys="$(allkeys "$accounts")"
        if [ "$keys" != "${keys#*$cert}" ]; then
            username="$(value_for_key "$accounts" "$cert")"
        fi
    fi
    password=
    if [ "$username" = "" ]; then
        echo -n "username:"
        read username
        echo -n "password:"
        read -s password
    else
        echo -n "password for $username:"
        read -s password
    fi
    echo ""
    validator="$(xcrun -sdk iphoneos -find Validation)"
    q="$(security delete-generic-password  -s Xcode:itunesconnect.apple.com 2>&1)"
    q="$(security add-generic-password -s Xcode:itunesconnect.apple.com -a $username -w $password -U -T $validator 2>&1)"
    echo "uploading..."
#    output="$(xcrun -sdk iphoneos Validation -online -upload -verbose $ipa 2>/dev/null)"
    xcrun -sdk iphoneos Validation -online -upload -verbose "$bd/$ipa" 2>/dev/null
    q="$(security delete-generic-password  -s Xcode:itunesconnect.apple.com 2>&1)"
#    echo "$output" | while read line; do
#        if [ "$line" != "${line#warning}" -o "$line" != "${line#didCompleteUploadForApplication}" ]; then
#            echo "$line"
#        fi
#    done
}

#### MAIN ####
#if the first arg is an ipa file, use the ipas directory as the basedirectory ($bd) and the ipa as the ($ipa)
#if the first arg is a path, use that path as the bd, otherwise use the working directory as the bd
#if the first arg is a mobileprovision file, use that file as the profile ($profile) and the profiles directory as the bd
#if the first arg is an Info.plist file, use that file as the $(infoplist) and the Info.plists directory as the bd
#otherwise use the first ipa file (alphabetically) in the bd as the ipa.

## COMMANDS THAT DONT NEED AN IPA OR PATH ##

#first arg should be the command ($cmd) 
cmd="$1"
bd="$(pwd)"

#if there was no command, exit
if [ "$cmd" = "" ];then
    problem_encountered "no command"
else
    shift
fi

#if cmd was "help" or "h" show the usage page
if [ "$cmd" = "help" -o "$cmd" = "h" ];then
    cmd_help $@
    script_done
fi

#if the cmd is "c" or "certs" or "certificates", display the information about certificates in the keychain
#if there is a following argument, it limits the certificates shown to ones matching this substring
if [ "$cmd" = "c" -o "$cmd" = "certs" -o "$cmd" = "certficiates" ];then
    cmd_certs $@
    script_done
fi

#if the cmd is "get" or "g", move following args to the working directory if they are mobileprovision files.  If no args specified, pull all mobileprovision files from the ~/Downloads/ folder
if [ "$cmd" = "get" -o "$cmd" = "g" ];then
    cmd_get $@
    script_done
fi

#if the cmd is "account" or "a", modify the accounts plist (for use in linking certificates to iTunesConnect accounts)
if [ "$cmd" = "account" -o "$cmd" = "accounts" -o "$cmd" = "a" ];then
    cmd_account $@
    script_done
fi

# get ipa/profile/info.plist/directory for the following commands that need one of these.

wd="$(pwd)"
ipa=
filetype=
profile=
infoplist=
if [ "${1%.ipa}" != "$1" -o "${1%.app*}" != "$1" -o "${1%.xcarchive*}" != "$1" ];then
    bd="$(dirname "${1}")"
	ipa="$(basename "${1}")"
	shift
	cd "$bd"
	bd="$(pwd)"
elif [ "${1%.mobileprovision}" != "$1" ];then
	bd="$(dirname "${1}")"
    profile="$(basename "${1}")"
    shift
    cd "$bd"
    bd=$(pwd)
	profile="$bd/$profile"
elif [ "${1%Info.plist}" != "$1" ];then
	bd="$(dirname "${1}")"
    infoplist="$(basename "${1}")"
    shift
    cd "$bd"
    bd="$(pwd)"
	infoplist="$bd/$infoplist"
elif [ "${1: -1}" = "/" ];then
	cd "$1"
	bd="$(pwd)"
	shift
    ipa="$(ipa_in_wd)"
elif [ "${1:0:1}" = "-" -o "$1" = "" ]; then
    ipa="$(ipa_in_wd)"
else
    problem_encountered "invalid filetype"
fi
clean_up
if [ "$cmd" = "clean" ]; then
    exit 0
fi
filetype="${ipa##*.}"
#echo "ipa: $ipa filetype: $filetype"
#make ad folder
cd "$bd"
ad=
if [ "$filetype" = "xcarchive" ]; then
    mkdir .ipa_payload && mkdir .ipa_payload/Payload
    cd "$ipa"
    tmp="$(find ./ -iname "*.app*" -maxdepth 3 -mindepth 3)"
    cd "$bd"
    tmpd="$ipa$(dirname "${tmp:2}")/"
    tmpa="$(basename "${tmp}")"
    cp -r "$tmpd$tmpa" ".ipa_payload/Payload/$tmpa/"
    ad=".ipa_payload/Payload/$tmpa"
elif [ "$filetype" = "app" ]; then
    mkdir .ipa_payload && mkdir .ipa_payload/Payload
    cp -r "$ipa" ".ipa_payload/Payload/$ipa/"
    ad=".ipa_payload/Payload/$ipa"
elif [ "$filetype" = "ipa" ]; then
    unzip -q "$ipa" -d .ipa_payload 
    if [ ! -d ".ipa_payload/Payload" ];then
        problem_encountered "problem unzipping ipa folder"
    fi
    cd .ipa_payload/Payload
    app="$(find ./ -type d -maxdepth 1 -iname "*.app*")"
    ad=".ipa_payload/Payload/${app:3}"
fi

#echo "ipa: $ipa ad: $ad"

## COMMANDS THAT NEED AN IPA, profile or info.plist##

#profile command
if [ "$cmd" = "p" -o "$cmd" = "prof" -o "$cmd" = "profile" ];then
	#if the first arg wasn't a profile, then an ipa file is necessary
	if [ "$profile" = "" ];then
		assert_ipa mobileprovision
		profile="$bd/$ad/embedded.mobileprovision"
	fi
	profile="$(security cms -D -i "$profile")"
    cmd_profile $@	
    script_done
fi

#Info.plist command
if [ "$cmd" = "i" -o "$cmd" = "info" ];then
	if [ "$infoplist" = "" ];then
		assert_ipa Info.plist
        infoplist="$bd/$ad/Info.plist"
    fi
    cmd_info $@
    script_done
fi

## COMMANDS THAT NEED AN IPA
assert_ipa

#verify command, to see if an ipa is signed
if [ "$cmd" = "v" -o "$cmd" = "verify" ]; then
	cmd_verify $@
    script_done
fi

#summary command, to show info.plist and profile information in brief summary
if [ "$cmd" = "s" -o "$cmd" = "summary" ]; then
    summary="$(cmd_summary)"
    if [ "$(JSON_from_args $@)" = "json" ]; then
        ql=
        if [ "$(ql_from_args $@)" = "ql" ]; then
           ql=ql 
        fi
        summary="$(convert_to_JSON "$summary" $ql)"
        summary="${summary%,}}"
    fi
    echo "$summary"
    if [ "$(dontclean_from_args $@)" = "dc" ]; then
        exit 0
    else
        script_done
    fi
fi

#resign command, to resign an ipa
if [ "$cmd" = "r" -o "$cmd" = "resign" ];then
    cmd_resign $@
    script_done
fi

#if cmd is "upload" or "u" try to upload the ipa to iTunesConnect
if [ "$cmd" = "u" -o "$cmd" = "upload" ];then
    cmd_upload $@
    script_done
fi
#cmd was not a valid command
if [ "${cmd:0:1}" = "-" ];then
	problem_encountered "Missing Command"
fi

problem_encountered 'not a valid command'

